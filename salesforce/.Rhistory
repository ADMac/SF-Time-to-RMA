View(ip2o)
agents <- ddply(ip2o, c(Case.Number, Case.Owner, Generate.RMA), function(x) count(x))
library(plyr)
agents <- ddply(ip2o, c(Case.Number, Case.Owner, Generate.RMA), function(x) count(x))
agents <- ddply(ip2o, c('Case.Number', 'Case.Owner', 'Generate.RMA'), function(x) count(x))
View(agents)
agents <- ddply(ip2o, c('Case.Number', 'Case.Owner'), function(x) count(x))
View(agents)
agents <- ddply(ip2o, c('Case.Number'), function(x) count(x))
View(agents)
agents <- ddply(ip2o, c('Case.Number'), summarize,
freq = length(Case.Number))
View(agents)
agents <- ddply(ip2o, c('Case.Number', 'Case.Owner'), summarize,
freq = length(Case.Number))
View(agents)
agents <- ddply(ip2o, c('Case.Owner','Case.Number','Generate.RMA'), summarize,
freq = length(Case.Number))
View(agents)
agents <- ddply(ip2o, c('Case.Owner','Case.Number','Generate.RMA'), summarize,
Frequency = length(Case.Number))
View(agents)
agents <- ddply(ip2o, c('Case.Owner','Generate.RMA','Case.Number'), summarize,
Frequency = length(Case.Number))
View(agents)
mean(agents$Frequency)
sd(agents$Frequency)
str(Generate.RMA)
str(agents$Generate.RMA)
rma <- subset(agents, Generate.RMA == 1)
noRMA <- subset(agents, Generate.RMA == 0)
sd(rma$Frequency)
summary(rma$Frequency)
summary(noRMA$Frequency)
sd(noRMA$Frequency)
sd(rma$Frequency)
save.image("~/Google Drive/progress2open.RData")
rma <- read.csv("~/Desktop/rma.csv")
View(rma)
rma[13,3]
rma[13,3]
rma[3,5]
as.Date(rma$Edit.Date)
as.Date(rma$Edit.Date, "%m/%d/%Y")
as.Date(rma$Edit.Date, "%m/%d/%y")
as.Date(rma$Edit.Date, "%m/%d/%y m:s")
as.Date(rma$Edit.Date, "%m/%d/%y %m:%s")
as.Date(rma$Edit.Date, "%m/%d/%y")
rma <- rma[-c(6068:6074),]
as.Date(rma$Edit.Date, "%m/%d/%y")
t(as.data.frame(strsplit(rma$Edit.Date,' ')))
t(as.data.frame(strsplit(as.character(rma$Edit.Date),' ')))
tail(rma$Edit.Date)
t(as.data.frame(strsplit(as.character(rma$Edit.Date[7]),' ')))
rma$Edit.Date[7]
(as.data.frame(strsplit(as.character(rma$Edit.Date[7]),' ')))
install.packages("chron")
library("chron", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
clock <- t(as.data.frame(strsplit(as.character(rma$Edit.Date[7]),' ')))
row.names(clock) = NULL
thetimes = chron(dates=clock[,1],times=clock[,2],
format=c('y-m-d','m:s'))
thetimes = chron(dates=clock[,1],times=clock[,2],
format=c('m/d/y','m:s'))
View(clock)
clock <- t(as.data.frame(strsplit(as.character(rma$Edit.Date),' ')))
row.names(clock) = NULL
thetimes = chron(dates=clock[,1],times=clock[,2],
format=c('m/d/y','m:s'))
thetimes = chron(dates=clock[,1],times=clock[,2],
format=c('m/d/y','h:m:s'))
View(clock)
View(clock)
rma <- read.csv("~/Desktop/rma.csv")
View(rma)
View(rma)
strptime(as.character(rma$Edit.Date), "%m/%d/%y %H:%M:%S")
strptime(as.character(rma$Edit.Date), "%m/%d/%y %M:%S")
View(rma)
rma <- rma[-c(6068:6074),]
rma$RMA.Date <- strptime(as.character(rma$RMA.Date), "%m/%d/%y %M:%S")
rma$Edit.Date <- strptime(as.character(rma$Edit.Date), "%m/%d/%y %M:%S")
rma$RMA.Date.Time <- strptime(as.character(rma$RMA.Date.Time), "%m/%d/%y %M:%S")
View(rma)
rma <- read.csv("~/Desktop/rma.csv")
View(rma)
rma <- rma[-c(6068:6074),]
rma$RMA.Date.Time <- strptime(as.character(rma$RMA.Date.Time), "%m/%d/%y %H:%M")
rma$Edit.Date <- strptime(as.character(rma$Edit.Date), "%m/%d/%y %H:%M")
View(rma)
rma[16,3] - rma[16,2]
rma[16,2] - rma[16,3]
touches <- rma[which(rma$RMA.Time > rma$Edit.Time),]
touches <- rma[which(rma$RMA.Time - rma$Edit.Time > 0),]
rma$RMA.Time - rma$Edit.Time
touches <- rma[which(rma$RMA.Date.Time - rma$Edit.Time > 0),]
rma$RMA.Date.Time - rma$Edit.Time
touches <- rma[which(rma$RMA.Date.Time > rma$Edit.Time),]
touches <- subset(rma, rma$RMA.Date.Time > rma$Edit.Date)
View(touches)
touches <- subset(rma, rma$RMA.Date.Time >= rma$Edit.Date)
View(touches)
save.image("~/Google Drive/touches.RData")
library(googlevis)
library(googleVis)
Building_Permits <- read.csv("~/Downloads/Building_Permits.csv")
View(Building_Permits)
library(XML)
url <- "http://en.wikipedia.org/wiki/List_of_countries_by_credit_rating"
x <- readHTMLTable(readLines(url), which=3)
levels(x$Rating) <- substring(levels(x$Rating), 4,
nchar(levels(x$Rating)))
x$Ranking <- x$Rating
levels(x$Ranking) <- nlevels(x$Rating):1
x$Ranking <- as.character(x$Ranking)
x$Rating <- paste(x$Country, x$Rating, sep=": ")
G <- gvisGeoChart(x, "Country", "Ranking", hovervar="Rating",
options=list(gvis.editor="S&P",
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"))
plot(G)
View(x)
View(x)
View(Building_Permits)
G <- gvisGeoChart(Building_Permits, "Street.Name", "Bin..", hovervar="BOROUGH",
options=list(gvis.editor="S&P",
region="us_metro"
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"))
G <- gvisGeoChart(Building_Permits, "Street.Name", "Bin..", hovervar="BOROUGH",
options=list(gvis.editor="S&P",
region="us_metro",
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"))
plot(G)
G <- gvisGeoChart(Building_Permits, "Street.Name", "Bin..", hovervar="BOROUGH",
options=list(gvis.editor="S&P",
projection="kavrayskiy-vii",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"))
plot(G)
G <- gvisGeoChart(Building_Permits, "Street.Name", "Bin..", hovervar="BOROUGH",
options=list(gvis.editor="S&P",
colorAxis="{colors:['#91BFDB', '#FC8D59']}"))
plot(G)
G <- gvisGeoChart(Building_Permits, "Street.Name", "Bin..", hovervar="BOROUGH",
options=list(region="US", displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(G)
detach("package:googleVis", unload=TRUE)
library("RgoogleMaps", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
lat = c(40.702147,40.718217,40.711614);
lon = c(-74.012318,-74.015794,-73.998284);
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)));
#this overhead is taken care of implicitly by GetMap.bbox();
markers = paste0("&markers=color:blue|label:S|40.702147,-74.015794&markers=color:",
"green|label:G|40.711614,-74.012318&markers=color:red|color:red|",
"label:C|40.718217,-73.998284")
MyMap <- GetMap(center=center, zoom=zoom,markers=markers,destfile = "MyTile1.png");
#Note that in the presence of markers one often needs to add some extra padding to the
#latitude range to accomodate the extent of the top most marker
#add a path, i.e. polyline:
MyMap <- GetMap(path = paste0("&path=color:0x0000ff|weight:5|40.737102,-73.990318|",
"40.749825,-73.987963|40.752946,-73.987384|40.755823,-73.986397"),
destfile = "MyTile3.png");
#use implicit geo coding
BrooklynMap <- GetMap(center="Brooklyn", zoom=13)
PlotOnStaticMap(BrooklynMap)
#use implicit geo coding and display labels in Korean:
BrooklynMap <- GetMap(center="Brooklyn", zoom=13, hl="ko")
PlotOnStaticMap(BrooklynMap)
lat = c(40.702147,40.718217,40.711614);
lon = c(-74.012318,-74.015794,-73.998284);
center = c(mean(lat), mean(lon));
zoom <- min(MaxZoom(range(lat), range(lon)));
#this overhead is taken care of implicitly by GetMap.bbox();
markers = paste0("&markers=color:blue|label:S|40.702147,-74.015794&markers=color:",
"green|label:G|40.711614,-74.012318&markers=color:red|color:red|",
"label:C|40.718217,-73.998284")
MyMap <- GetMap(center=center, zoom=zoom,markers=markers,destfile = "MyTile1.png");
MyMap <- GetMap(path = paste0("&path=color:0x0000ff|weight:5|40.737102,-73.990318|",
"40.749825,-73.987963|40.752946,-73.987384|40.755823,-7.986397"), destfile = "MyTile3.png");
BrooklynMap <- GetMap(center="Brooklyn", zoom=13)
PlotOnStaticMap(BrooklynMap)
markers = paste0("&markers=color:blue|label:S|40.702147,-74.015794&markers=color:",
"green|label:G|40.711614,-74.012318&markers=color:red|color:red|",
"label:C|40.718217,-73.998284")
MyMap <- GetMap(center=center, zoom=zoom,markers=markers,destfile = "MyTile1.png");
MyMap <- GetMap(path = paste0("&path=color:0x0000ff|weight:5|40.737102,-73.990318|",
"40.749825,-73.987963|40.752946,-73.987384|40.755823,-7.986397"), destfile = "MyTile3.png");
MyMap <- GetMap(path = paste0("&path=color:0x0000ff|weight:5|40.737102,-73.990318|",
"40.749825,-73.987963|40.752946,-73.987384|40.755823,-7.986397"), destfile = "MyTile3.png");
map4 = Leaflet$new()
map4$setView(c(29.6779, -95.4379), 10)
map4$tileLayer("http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png")
# map4$tileLayer(provider = 'Stamen.Terrain')
data(crime, package = 'ggmap')
dat <- head(crime)[,c('lat', 'lon', 'offense')]
names(dat) <- c('lat', 'lng', 'offense')
map4$geocsv(dat)
map4
library(rCharts)
map4 = Leaflet$new()
map4$setView(c(29.6779, -95.4379), 10)
map4$tileLayer("http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png")
# map4$tileLayer(provider = 'Stamen.Terrain')
data(crime, package = 'ggmap')
dat <- head(crime)[,c('lat', 'lon', 'offense')]
names(dat) <- c('lat', 'lng', 'offense')
map4$geocsv(dat)
map4
map4 = Leaflet$new()
map4$setView(c(29.6779, -95.4379), 10)
map4$tileLayer("http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png")
# map4$tileLayer(provider = 'Stamen.Terrain')
data(crime, package = 'ggmap')
dat <- head(crime)[,c('lat', 'lon', 'offense')]
names(dat) <- c('lat', 'lng', 'offense')
map4$geocsv(dat)
map4
map4 = Leaflet$new()
map4$setView(c(29.6779, -95.4379), 10)
map4$tileLayer("http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/997/256/{z}/{x}/{y}.png")
load("~/Google Drive/touches.RData")
View(rma)
str(rma$Edit.Date)
rma$Edit.Date[3] - rma$RMA.Date.Time [3]
str(rma$Edit.Date[3] - rma$RMA.Date.Time [3])
rma$Edit.Date[3:9] - rma$RMA.Date.Time [3:9]
(rma$Edit.Date[3:9] - rma$RMA.Date.Time [3:9])/60
difftime(rma$Edit.Date[3:9], rma$RMA.Date.Time [3:9], units = "hours")
difftime(rma$Edit.Date[3:9], rma$RMA.Date.Time [3:9], units = "days")
difftime(rma$Edit.Date, rma$RMA.Date.Time, units = "days")
rma$Edit.Date[3] - rma$RMA.Date.Time [3]
.193056*24
.633344*60 #minutes
.00064*60 #seconds
rma$Edit.Date[151] - rma$RMA.Date.Time [151]
rma$Edit.Date[6067] - rma$RMA.Date.Time [6067]
rma$Edit.Date[6060] - rma$RMA.Date.Time [6060]
library(RForcecom)
install.packages("bigml")
iris
library("bigml", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
username <- "allister.mckenzie@makerbot.com"
password <- "N2!tiT!0nELS2EYbsKvgYJhFNG15vmc64"
instanceURL <- "https://na13.salesforce.com/"
apiVersion <- "30.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
library(RForcecom)
session <- rforcecom.login(username, password, instanceURL, apiVersion)
rep2 <- read.csv("~/Desktop/rep2.csv")
View(rep2)
objectName <- "Case"
id <- rep2[x,2]
fields <- c(mbsu_Cost_of_Parts__c=rep2[y,3])
rforcecom.update(session, objectName, id, fields)
apply(rep2, 1, function(x,y) {
id <- rep2[x,2]
fields <- c(mbsu_Cost_of_Parts__c=rep2[y,3])
rforcecom.update(session, objectName, id, fields)
})
apply(rep2, 1, function(x,y) {
id <- rep2[x,1]
fields <- c(mbsu_Cost_of_Parts__c=rep2[y,2])
rforcecom.update(session, objectName, id, fields)
})
id <- rep2[327,1]
fields <- c(mbsu_Cost_of_Parts__c=rep2[327,2])
rforcecom.update(session, objectName, id, fields)
apply(rep2, 1, function(x) {
id <- x[1]
fields <- c(mbsu_Cost_of_Parts__c = x[2])
rforcecom.update(session, objectName, id, fields)
})
username <- "allister.mckenzie@makerbot.com"
password <- "N2!tiT!0nELS2EYbsKvgYJhFNG15vmc64"
instanceURL <- "https://na13.salesforce.com/"
apiVersion <- "27.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
apply(rep2, 1, function(x) {
id <- x[1]
fields <- c(mbsu_Cost_of_Parts__c = x[2])
rforcecom.update(session, objectName, id, fields)
})
apiVersion <- "28.0"
apply(rep2, 1, function(x) {
id <- x[1]
fields <- c(mbsu_Cost_of_Parts__c = x[2])
rforcecom.update(session, objectName, id, fields)
})
apply(rep2, 1, function(x) {
id <- x[1]
fields <- c(mbsu_Cost_of_Parts__c = x[2])
rforcecom.update(session, objectName, id, fields)
})
rep2 <- read.csv("~/Desktop/rep2.csv")
View(rep2)
split(rep2)
split(rep2, 1)
split(rep2, 2)
split(rep2, 1:length(rep2[,1]))
rep2.list <- split(rep2, 1:length(rep2[,1]))
library(RForcecom)
username <- "allister.mckenzie@makerbot.com"
password <- "N2!tiT!0nELS2EYbsKvgYJhFNG15vmc64"
instanceURL <- "https://na13.salesforce.com/"
apiVersion <- "30.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
lapply(rep2.list, function(x) {
objectName = 'Case'
id <- x[2]
fields <- c(mbsu_Cost_of_Parts__c = x[1])
rforcecom.update(session, objectName, id, fields)
})
rep2.list[1]
rep2.list[2]
rep2.list[[2]]
rep2.list[[1]]
rep2.list[1]
rep2.list[[[1]]]
[[1]]
rep2.list[[1]]
rep2.list[[2]]
str(rep2.list)
rep2.list[[254]]
lapply(rep2.list, function(x) {
objectName = 'Case'
id <- x[[2]]
fields <- c(mbsu_Cost_of_Parts__c = x[[1]])
rforcecom.update(session, objectName, id, fields)
})
install.packages("RHive")
install.packages("rHadoopClient")
install.packages("functional")
library(c('R.methodsS3','hydroPSO'))
install.packages(c('R.methodsS3','hydroPSO'))
library(devtools)
install_github("pryr")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library("rCharts", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
data(economics, package = 'ggplot2')
econ <- transform(economics, date = as.character(date))
m1 <- mPlot(x = 'date', y = c('psavert', 'uempmed'), type = 'Line',
data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1
library(RForcecom)
library(RForcecom)
username <- "allister.mckenzie@makerbot.com"
password <- "N2!tiT!0nELS2EYbsKvgYJhFNG15vmc64"
instanceURL <- "https://na13.salesforce.com/"
apiVersion <- "30.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
# Execute a SOQL
soqlQuery <- "SELECT Id, mbsu_Case_Products__c, CreatedDate
FROM Case
WHERE MB_Action_Summary__c IN c('Send Replacement','Cross Ship','Repaired','Refurb', 'Sold Service Item"
rforcecom.query(session, soqlQuery)
# Execute a SOQL
soqlQuery <- "SELECT Id, mbsu_Case_Products__c, CreatedDate
FROM Case
LIMIT 500"
rforcecom.query(session, soqlQuery)
# Execute a SOQL
soqlQuery <- "SELECT Id, mbsu_Case_Product__c, CreatedDate
FROM Case
LIMIT 500"
rforcecom.query(session, soqlQuery)
query <- rforcecom.query(session, soqlQuery)
View(query)
str(query$CreatedDate)
soqlQuery <- "SELECT Id, mbsu_Case_Product__c, CreatedDate
FROM Case
WHERE Owner = Joseph Muniz"
query <- rforcecom.query(session, soqlQuery)
# Execute a SOQL
soqlQuery <- "SELECT Id, mbsu_Case_Product__c, CreatedDate
FROM Case
WHERE CreatedDate = 2014-03-06T15:30:08.000Z"
query <- rforcecom.query(session, soqlQuery)
View(query)
str(query$CreatedDate)
install.packages("lubridate")
as.Date(query$CreatedDate)
as.Date(query$CreatedDate, "%Y-%m-%dT%h:%m:%s")
as.Date(query$CreatedDate, "%Y-%m-%d %h:%m:%s")
as.Date(query$CreatedDate, "%Y-%m-%d )
as.Date(query$CreatedDate, "%Y-%m-%d")
as.Date(query$CreatedDate)
soqlQuery <- "SELECT Id, mbsu_Case_Product__c, CreatedDate
FROM Case
WHERE CreatedDate >= 2014-04-27T15:30:08.000Z"
query <- rforcecom.query(session, soqlQuery)
View(query)
View(query)
as.Date(query$CreatedDate)
strsplit(query$CreatedDate)
strsplit(query$CreatedDate, "T")
strsplit(query$CreatedDate[1], "T")
strsplit(as.character(query$CreatedDate[1]), "T")
query <- rforcecom.query(session, soqlQuery)
library(RForcecom)
username <- "allister.mckenzie@makerbot.com"
password <- "N2!tiT!0nELS2EYbsKvgYJhFNG15vmc64"
instanceURL <- "https://na13.salesforce.com/"
apiVersion <- "30.0"
session <- rforcecom.login(username, password, instanceURL, apiVersion)
# Execute a SOQL
soqlQuery <- "SELECT Id, mbsu_Case_Product__c, CreatedDate
FROM Case
WHERE CreatedDate >= 2014-04-27T15:30:08.000Z"
query <- rforcecom.query(session, soqlQuery)
query$CreatedDate <- as.character(query$CreatedDate)
sub("T", " ", query$CreatedDate)
sub(".000Z", " ", query$CreatedDate)
sub(".000Z", "", query$CreatedDate)
query$CreatedDate <- sub("T", " ", query$CreatedDate)
query$CreatedDate <- sub(".000Z", "", query$CreatedDate)
View(query)
library(lubridate)
ymd_hms(query$CreatedDate)
query$CreatedDate <- ymd_hms(query$CreatedDate)
View(query)
soqlQuery <- "SELECT Id, mbsu_Case_Product__c, CreatedDate FROM Case
WHERE CreatedDate >= 2014-04-27T15:30:08.000Z
AND CreatedDate <= 2014-05-03T15:30:08.000Z"
query <- rforcecom.query(session, soqlQuery)
View(query)
query$CreatedDate <- as.character(query$CreatedDate)
query$CreatedDate <- sub("T", " ", query$CreatedDate)
query$CreatedDate <- sub(".000Z", "", query$CreatedDate)
query$CreatedDate <- ymd_hms(query$CreatedDate)
View(query)
date.change <- function(x) {
x <- as.character(x)
x <- sub("T", " ", x)
x <- sub(".000Z", "", x)
x <- ymd_hms(x)
}
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
sessionInfo()
runExample("01_hello")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
library("slidify", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
detach("package:slidify", unload=TRUE)
detach("package:shiny", unload=TRUE)
remove.packages("shiny")
install.packages("shiny")
runApp("shinyApp")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp", display.mode = "showcase")
runApp("shinyApp", display.mode = "showcase")
# Expression that generates a histogram. The expression is
runApp("shinyApp", display.mode = "showcase")
)
runExample("03_reactivity") # a reactive expression
runExample("06_tabsets") # tabbed panels
runExample("10_download") # file download wizard
runExample("07_widgets") # help text and submit buttons`
runExample("03_reactivity") # a reactive expression
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
h1("My title")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
runApp("shinyApp")
counties <- readRDS("census-app/data/counties.rds")
counties <- readRDS("shinyapp/data/counties.rds")
head(counties)
View(counties)
View(counties)
View(counties)
library("maps")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
source("census-app/helpers.R")
percent_map(counties$white, "darkgreen", "% white")
runApp("shinyApp")
runApp("salesforce")
library("RForcecom")
library("shiny")
library("rCharts")
runApp("salesforce")
